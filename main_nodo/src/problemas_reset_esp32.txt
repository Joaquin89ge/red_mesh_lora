PROBLEMAS DEL RESETEO DEL ESP32 - ANÁLISIS COMPLETO
=====================================================

1. NATURALEZA DE LOS PROBLEMAS
===============================

1.1 Problema Principal: sendtoWait de RHMesh
--------------------------------------------
- DESCRIPCIÓN: La función sendtoWait() de RadioHead RHMesh se cuelga indefinidamente
- CAUSA: Espera ACK (acknowledgment) que nunca llega del gateway
- MANIFESTACIÓN: ESP32 se queda bloqueado en la función, no responde
- FRECUENCIA: Ocurre cuando el gateway no está disponible o hay problemas de red

1.2 Problemas Secundarios del Reset
-----------------------------------
- GPS: Cold start de 30-60 segundos cada reset
- Gateway Address: Se pierde la dirección del gateway guardada pero se recupera con littleFS
- Estado de RHMesh: Tablas de enrutamiento se pierden posible perdida de mensajes del gateway
- Sensores: Se reinician todos los sensores
- Tiempo: Se pierde el tiempo de ejecución acumulado

2. SOLUCIÓN IMPLEMENTADA: Task Watchdog Timer (TWDT)
====================================================

2.1 Configuración del TWDT
---------------------------
- TIMEOUT: 10 segundos configurado en config.h
- RESET INTERVALO: 5 segundos en el loop principal
- PANIC MODE: Habilitado para reinicio automático del ESP32
- DETECCIÓN: Detecta bloqueos reales del sistema completo

2.2 Funcionamiento
------------------
- El TWDT se resetea cada 5 segundos en el loop()
- Si sendtoWait se cuelga, el TWDT no se resetea
- Después de 10 segundos sin reset, reinicia todo el ESP32
- El sistema se recupera completamente desde cero

2.3 Ventajas de esta Solución
-----------------------------
- DETECCIÓN REAL: Detecta bloqueos reales, no falsos positivos
- RECUPERACIÓN COMPLETA: Reinicia todo el sistema limpiamente
- CONFIGURABLE: Timeouts ajustables desde config.h
- SIMPLE: No requiere lógica compleja de detección

3. CONSECUENCIAS DEL RESETEO
============================

3.1 Pérdida de Datos
---------------------
- Gateway Address: Se pierde la dirección del gateway guardada pero se recupera con littleFS
- Estado de RHMesh: Tablas de enrutamiento se pierden posible perdida de mensajes del gateway
- Tiempo de ejecución: Se pierde el tiempo acumulado
- Configuraciones: Se reinician todas las configuraciones

3.2 Problemas de GPS
--------------------
- COLD START: 30-60 segundos para obtener primera señal
- PÉRDIDA DE TIEMPO: No hay datos GPS durante el cold start
- POSICIÓN: Puede perder la posición actual
- ALMANAC: Se pierde el almanac del GPS (datos de satélites)

3.3 Problemas de Comunicación
-----------------------------
- ANNOUNCE: Necesita recibir nuevo ANNOUNCE del gateway
- REGISTRO: Debe re-registrarse con el gateway
- ENRUTAMIENTO: RHMesh debe reconstruir tablas de enrutamiento
- MENSAJES: Se pueden perder mensajes durante el reset

3.4 Problemas de Sensores
-------------------------
- DHT11: Se reinicia el sensor de temperatura/humedad
- BUFFER: Se pierden datos en buffers de sensores
- CALIBRACIÓN: Se pierden calibraciones si las hay
- ESTADO: Se reinicia el estado de todos los sensores

4. IMPACTO EN EL SISTEMA
=========================

4.1 Tiempo de Recuperación
---------------------------
- ESP32 BOOT: ~3-5 segundos
- GPS COLD START: 30-60 segundos
- GATEWAY REGISTRO: 5-10 segundos
- TOTAL: 38-75 segundos de inactividad

4.2 Pérdida de Funcionalidad
----------------------------
- NO ENVÍO: No puede enviar datos durante la recuperación
- NO RECEPCIÓN: No puede recibir comandos del gateway
- NO GPS: Sin datos de posición/tiempo
- NO SENSORES: Sin datos de sensores durante boot

4.3 Frecuencia de Resets
------------------------
- DEPENDE DE: Frecuencia de problemas de red
- TÍPICO: 1-5 resets por día en condiciones normales
- PROBLEMÁTICO: 10+ resets por día indica problemas de red
- CRÍTICO: Resets cada pocos minutos indica fallo de gateway

5. ALTERNATIVAS CONSIDERADAS
============================

5.1 Reset del Módulo LoRa (Rechazada)
--------------------------------------
- PROBLEMA: No resuelve el bloqueo de sendtoWait
- RIESGO: Puede causar más problemas de comunicación
- COMPLEJIDAD: Requiere lógica adicional de detección

5.2 Segundo Core (Rechazada)
-----------------------------
- PROBLEMA: Complejidad de sincronización entre cores
- RIESGO: Race conditions y problemas de memoria
- OVERHEAD: Consumo adicional de energía

5.3 GPS con Alimentación Independiente (implementada)
--------------------------------------
- VENTAJA: GPS no se resetea con ESP32
- BENEFICIO: Hot start rápido (1-5 segundos)
- IMPLEMENTACIÓN: Alimentar GPS desde batería 3.3V independiente

5.4 Microcontrolador Dedicado (rechazada)
-----------------------------
- VENTAJA: GPS siempre funcionando
- DESVENTAJA: Complejidad y costo adicional
- IMPLEMENTACIÓN: Arduino Nano dedicado al GPS


7. CONFIGURACIÓN ACTUAL
=======================

7.1 TWDT Settings (config.h)
-----------------------------
#define TWDT_TIMEOUT_SECONDS 10
#define TWDT_RESET_INTERVAL_MS 5000
#define TWDT_ENABLE_PANIC true

7.2 Comportamiento
------------------
- RESET AUTOMÁTICO: Después de 10 segundos de bloqueo
- FRECUENCIA: Cada 5 segundos se resetea el TWDT
- RECUPERACIÓN: Sistema se reinicia completamente
- LOGGING: Debug detallado en Serial

8. CONCLUSIÓN
=============

La solución implementada (TWDT) es la más práctica y efectiva para el problema de bloqueos de sendtoWait. Aunque tiene consecuencias significativas en términos de tiempo de recuperación y pérdida de datos, proporciona una recuperación automática y confiable del sistema.

Las principales áreas de mejora son:
1. GPS con alimentación independiente para reducir tiempo de recuperación (implementada)
2. Backup de configuración para mantener estado entre resets (implementada)
3. Monitoreo y alertas para detectar problemas de red 


El sistema actual es funcional y robusto, pero puede mejorarse significativamente con las recomendaciones mencionadas. 